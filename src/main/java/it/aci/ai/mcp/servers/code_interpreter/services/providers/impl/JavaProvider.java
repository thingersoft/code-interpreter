package it.aci.ai.mcp.servers.code_interpreter.services.providers.impl;

import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import it.aci.ai.mcp.servers.code_interpreter.services.providers.LanguageProvider;

@Service
public class JavaProvider extends LanguageProvider {

    private static final String MAIN_CLASS_NAME = "Main";
    private static final String WRAPPER_PROJECT_VERSION = "1.0-SNAPSHOT";
    private static final String WRAPPER_PROJECT_ARTIFACT_ID = "autogenerated";

    @Override
    public String getFromImage() {
        return "maven:3.9.9-eclipse-temurin-21-jammy";
    }

    @Override
    public String getSourceFileName() {
        return MAIN_CLASS_NAME + ".java";
    }

    @Override
    public List<String> getImageInitCommands() {
        return getSetEnvVariablesCommands(Map.of("MAVEN_CONFIG", "/home/" + LanguageProvider.IMAGE_USER + "/.m2"));
    }

    @Override
    public void prepareWorkspace(Path workspace, String sourceCode) throws IOException {
        // replace class name in source code to match source file name
        Pattern p = Pattern.compile("(public\\s+class\\s+)(\\w+)(\\s*\\{)");
        Matcher m = p.matcher(sourceCode);
        if (m.find()) {
            sourceCode = m.replaceFirst("$1" + MAIN_CLASS_NAME + "$3");
        } else {
            throw new IllegalArgumentException("Unable to identify main class in cource code");
        }

        // infer external dependencies
        Set<String> imports = extractImports(sourceCode);
        Set<MavenDependency> dependencies = findMavenDependencies(imports);
        String pom = generatePomXml(dependencies);

        // write maven project to workspace
        Path sourcePath = Files.createDirectories(workspace.resolve("src/main/java"));
        Files.writeString(sourcePath.resolve(getSourceFileName()), sourceCode, StandardOpenOption.CREATE);
        Files.writeString(workspace.resolve("pom.xml"), pom, StandardOpenOption.CREATE);

    }

    @Override
    public List<String> getPrepareExecutionCommands(Path workspace) {
        // capture maven errors to stderr
        // TODO keep stdout as well for tracing purpose (need to switch to bash)
        return List.of("mvn package | grep '^\\[ERROR\\]' >&2");
    }

    @Override
    public List<String> getExecutionCommands(Path workspace) {
        return List.of("java -jar target/" + WRAPPER_PROJECT_ARTIFACT_ID + "-" + WRAPPER_PROJECT_VERSION
                + "-jar-with-dependencies.jar");
    }

    /**
     * Extracts import statements from the given Java source code string.
     */
    private static Set<String> extractImports(String sourceCode) {
        Set<String> imports = new HashSet<>();
        Pattern importPattern = Pattern.compile("import\\s+([\\w\\.]+);");
        Matcher matcher = importPattern.matcher(sourceCode);

        while (matcher.find()) {
            String fullImport = matcher.group(1);
            if (!fullImport.startsWith("java.") && !fullImport.startsWith("javax.")) { // Ignore standard libraries
                imports.add(fullImport);
            }
        }
        return imports;
    }

    private static Set<MavenDependency> findMavenDependencies(Set<String> imports) {
        Set<MavenDependency> dependencies = new HashSet<>();

        // TODO

        return dependencies;
    }

    /**
     * Generates a pom.xml file with the inferred dependencies.
     */
    private static String generatePomXml(Set<MavenDependency> dependencies) {

        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.newDocument();

            Element project = doc.createElement("project");
            project.setAttribute("xmlns", "http://maven.apache.org/POM/4.0.0");
            project.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
            project.setAttribute("xsi:schemaLocation",
                    "http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd");
            doc.appendChild(project);

            appendTextElement(doc, project, "modelVersion", "4.0.0");
            appendTextElement(doc, project, "groupId", "com.example");
            appendTextElement(doc, project, "artifactId", WRAPPER_PROJECT_ARTIFACT_ID);
            appendTextElement(doc, project, "version", WRAPPER_PROJECT_VERSION);

            Element dependenciesElement = doc.createElement("dependencies");
            project.appendChild(dependenciesElement);

            for (MavenDependency dep : dependencies) {
                Element dependency = doc.createElement("dependency");
                appendTextElement(doc, dependency, "groupId", dep.groupId());
                appendTextElement(doc, dependency, "artifactId", dep.artifactId());
                appendTextElement(doc, dependency, "version", dep.version());
                dependenciesElement.appendChild(dependency);
            }

            // assembly plugin
            Element goalsElement = doc.createElement("goals");
            appendTextElement(doc, goalsElement, "goal", "single");

            Element manifestElement = doc.createElement("manifest");
            appendTextElement(doc, manifestElement, "mainClass", MAIN_CLASS_NAME);

            Element archiveElement = doc.createElement("archive");
            archiveElement.appendChild(manifestElement);

            Element descriptorRefsElement = doc.createElement("descriptorRefs");
            appendTextElement(doc, descriptorRefsElement, "descriptorRef", "jar-with-dependencies");

            Element configurationElement = doc.createElement("configuration");
            configurationElement.appendChild(archiveElement);
            configurationElement.appendChild(descriptorRefsElement);

            Element executionElement = doc.createElement("execution");
            appendTextElement(doc, executionElement, "phase", "package");
            executionElement.appendChild(goalsElement);
            executionElement.appendChild(configurationElement);

            Element pluginElement = doc.createElement("plugin");
            appendTextElement(doc, pluginElement, "groupId", "org.apache.maven.plugins");
            appendTextElement(doc, pluginElement, "artifactId", "maven-assembly-plugin");
            appendTextElement(doc, pluginElement, "version", "3.3.0");
            pluginElement
                    .appendChild(doc.createElement("executions"))
                    .appendChild(executionElement);

            project
                    .appendChild(doc.createElement("build"))
                    .appendChild(doc.createElement("plugins"))
                    .appendChild(pluginElement);

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty("indent", "yes");
            DOMSource source = new DOMSource(doc);
            StringWriter writer = new StringWriter();
            StreamResult result = new StreamResult(writer);
            transformer.transform(source, result);
            return writer.toString();
        } catch (TransformerException | ParserConfigurationException e) {
            throw new RuntimeException(e);
        }

    }

    private static void appendTextElement(Document doc, Element parent, String tag, String text) {
        Element element = doc.createElement(tag);
        element.appendChild(doc.createTextNode(text));
        parent.appendChild(element);
    }

    private static record MavenDependency(String groupId, String artifactId, String version) {
    }

}
